[
  {
    "Create class": {
      "prefix": "cls",
      "body": [
        "class ${1:Name}",
        "{",
        "  ${2:inherit ${3:parent};}",
        "",
        "  void create(${4:args})",
        "  {",
        "    ${5}",
        "  }",
        "}"
      ]
    }
  },
  {
    "Roxen <if#tag>": {
      "prefix": "roxif",
      "body": [
        "class TagIf${1:Name}",
        "{",
        "  inherit RXML.Tag;",
        "",
        "  constant name = \"if\";",
        "  constant plugin_name = \"${2:plugin-name}\";",
        "",
        "  mapping(string:RXML.Type) req_arg_types = ([",
        "    // \"attribute\" : RXML.t_text(RXML.PXml)",
        "  ]);",
        "",
        "  mapping(string:RXML.Type) opt_arg_types = ([",
        "    // \"attribute\" : RXML.t_text(RXML.PXml)",
        "  ]);",
        "",
        "  int eval(string a, RequestID id, mapping args)",
        "  {",
        "    ${3:// Code here}",
        "",
        "    return 0; // 0 or 1",
        "  }",
        "}"
      ]
    }
  },
  {
    "Do while loop": {
      "prefix": "do",
      "body": [
        "do {",
        "  ${2:// body}",
        "} while (${1:true});"
      ]
    }
  },
  {
    "Create lambda": {
      "prefix": "la",
      "body": [
        "lambda (${1}) {",
        "  ${2}",
        "}"
      ]
    }
  },
  {
    "Foreach key/value Loop": {
      "prefix": "forek",
      "body": [
        "foreach (${1:mapping}; ${2:string key}; ${3:mixed value}) {",
        "  ${4}",
        "}"
      ]
    }
  },
  {
    "Make TRACE macro": {
      "prefix": "MKT",
      "body": [
        "#ifdef ${1:NAME}_DEBUG",
        "# define TRACE(X...)werror(\"%s:%d: %s\",basename(__FILE__),__LINE__,sprintf(X))",
        "#else",
        "# define TRACE(X...)0",
        "#endif"
      ]
    }
  },
  {
    "While loop": {
      "prefix": "whi",
      "body": [
        "while (${1:true}) {",
        "  ${2:// body}",
        "}"
      ]
    }
  },
  {
    "Foreach Loop": {
      "prefix": "fore",
      "body": [
        "foreach (${1}, ${2}) {",
        "  ${3}",
        "}"
      ]
    }
  },
  {
    "Switch": {
      "prefix": "sw",
      "body": [
        "switch (${1})",
        "{",
        "  case ${2}:",
        "    ${3}",
        "    break;",
        "",
        "  default:",
        "    ${4}",
        "    break;",
        "}"
      ]
    }
  },
  {
    "Roxen <emit#tag>": {
      "prefix": "roxem",
      "body": [
        "class TagEmit${1:Name}",
        "{",
        "  inherit RXML.Tag;",
        "",
        "  constant name = \"emit\";",
        "  constant plugin_name = \"${2:plugin-name}\";",
        "",
        "  mapping(string:RXML.Type) req_arg_types = ([",
        "    // \"attribute\" : RXML.t_text(RXML.PEnt)",
        "  ]);",
        "",
        "  mapping(string:RXML.Type) opt_arg_types = ([",
        "    // \"attribute\" : RXML.t_text(RXML.PEnt)",
        "  ]);",
        "",
        "  array get_dataset(mapping args, RequestID id)",
        "  {",
        "    ${3:// Code}",
        "    return ({});",
        "  }",
        "}"
      ]
    }
  },
  {
    "Generate main method": {
      "prefix": "main",
      "body": [
        "int main(int argc, array(string) argv)",
        "{",
        "  ${1}",
        "  return 0;",
        "}"
      ]
    }
  },
  {
    "For loop": {
      "prefix": "for",
      "body": [
        "for (${1:int i}; ${2:i} < ${3:?}; i++) {",
        "  ${4:// Body}",
        "}"
      ]
    }
  },
  {
    "Roxen <tag/>": {
      "prefix": "roxta",
      "body": [
        "class Tag${1:Name}",
        "{",
        "  inherit RXML.Tag;",
        "",
        "  constant name = \"${2:tag-name}\";",
        "",
        "  mapping(string:RXML.Type) req_arg_types = ([",
        "    // \"attribute\" : RXML.t_text(RXML.PEnt)",
        "  ]);",
        "",
        "  mapping(string:RXML.Type) opt_arg_types = ([",
        "    // \"attribute\" : RXML.t_text(RXML.PEnt)",
        "  ]);",
        "",
        "  class Frame",
        "  {",
        "    inherit RXML.Frame;",
        "",
        "    array do_return(RequestID id)",
        "    {",
        "      ${3:// Code here}",
        "",
        "      result = \"\";",
        "",
        "      return 0;",
        "    }",
        "  }",
        "}"
      ]
    }
  },
  {
    "Create method": {
      "prefix": "func",
      "body": [
        "${1:void} ${2:method_name}(${3:args})",
        "{",
        "  ${4}",
        "}"
      ]
    }
  }
]